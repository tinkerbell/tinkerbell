{{- if and .Values.optional.hookos.enabled }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: download-hook
  namespace: {{ .Release.Namespace | quote }}
data:
  entrypoint.sh: |-
    #!/usr/bin/env bash
    
    set -xeuo pipefail
    
    function usage() {
        echo "Usage: $0 [OPTION]..."
        echo "Script for downloading HookOS artifacts"
        echo
        echo "Options:"
        echo "  -u, --url                 Base URL to the location of the HookOS artifacts (default: https://github.com/tinkerbell/hook/releases/download/latest)"
        echo "  -a, --arch                Architectures to download, one of [x86_64, aarch64, both] (default: both)"
        echo "  -v, --version             The kernel version of the HookOS artifacts to download, one of [5.10, 6.6, both] (default: 6.6)"
        echo "  -e, --ext                 The artifact extension types to download, one of [tar.gz, iso, both] (default: both)"
        echo "  -o, --output-dir          Output directory to store the downloaded artifacts (default: .)"
        echo "  -h, --help                Display this help and exit"
    }
    
    function validate_option() {
        local option="$1"
        local valid_values="$2"
        local value="$3"
        
        if [[ ! " ${valid_values[@]} " =~ " ${value} " ]]; then
        >&2 echo "Invalid value: '$value' for '${option}'. Valid values are: [${valid_values[*]}]"
        usage
        exit 1
        fi
    }
    
    function get_by_kernel_version() {
        # data must be newline separated list of artifacts
        local data="$1"
        local version="$2"
        local artifacts=""
        
        if [[ "${version}" == "both" ]]; then
            artifacts+=$(grep -v "latest-lts" <<< $data)$'\n'
            artifacts+=$(grep "latest-lts" <<< "$data")
        elif [[ "${version}" == "6.6" ]]; then
            artifacts=$(grep "latest-lts" <<< "$data")
        elif [[ "${version}" == "5.10" ]]; then
            artifacts=$(grep -v "latest-lts" <<< "$data")
        fi
        
        echo "${artifacts}"
    }
    
    function get_by_extension() {
        local data="$1"
        local ext="$2"
        local artifacts=""
        
        if [[ "${ext}" == "both" ]]; then
            artifacts=$(grep ".tar.gz" <<< "$data")$'\n'
            artifacts+=$(grep ".iso" <<< "$data")
        elif [[ "${ext}" == "tar.gz" ]]; then
            artifacts=$(grep ".tar.gz" <<< "$data")
        elif [[ "${ext}" == "iso" ]]; then
            artifacts=$(grep ".iso" <<< "$data")
        fi
        
        echo "${artifacts}"
    }
    
    function get_by_arch() {
        local data="$1"
        local arch="$2"
        local artifacts=""
        
        if [[ "${arch}" == "both" ]]; then
            artifacts+=$(grep "x86_64" <<< "$data")$'\n'
            artifacts+=$(grep "aarch64" <<< "$data")
        elif [[ "${arch}" == "x86_64" ]]; then
            artifacts=$(grep "x86_64" <<< "$data")
        elif [[ "${arch}" == "aarch64" ]]; then
            artifacts=$(grep "aarch64" <<< "$data")
        fi
        
        echo "${artifacts}"
    }
    
    function download_artifacts() {
        local url="$1"
        local artifacts="$2"
        local out_dir="$3"
        
        while IFS= read -r line; do
            echo "==> Downloading artifact: ${line} from ${url}/${line} to ${out_dir}/${line}"
            wget -O "${out_dir}/${line}" "${url}/${line}"
        done < <(printf '%s\n' "$artifacts")
    }
    
    function run_checksum512() {
        local checksum_data="$1"
        local out_dir="$2"
        
        (cd "${out_dir}" && sha512sum -c <<< "${checksum_data}")
        if [ $? -ne 0 ]; then
            return 1
        fi
        return 0
    }
    
    function checksum_format() {
        # data is a newline separated list of artifacts
        local data="$1"
        local raw="$2"
        local checksums=""
        
        while IFS= read -r line; do
            checksums+=$(grep "${line}" <<< "${raw}")$'\n'
        done < <(printf '%s\n' "$data")
        
        echo "${checksums}"
    }
    
    function run_for_kernel_version() {
        local filtered="$1"
        local raw_data="$2"
        local output_dir="$3"
        local checksums="$4"
        local url="$5"
        
        echo "==> Running initial checksum check for artifact: ${filtered}"
        checksums=$(checksum_format "${filtered}" "${raw_data}")
        if run_checksum512 "${checksums}" "${output_dir}"; then
            cd "${output_dir}"
            echo "==> Extracting existing artifacts"
            for f in $(ls *.tar.gz | grep -vE "^dtbs"); do echo "==> Extracting ${f}"; tar --no-same-permissions --overwrite -ozxvf "${f}"; done
            return 0
        fi
        
        download_artifacts "${url}" "${filtered}" "${output_dir}"
        if [ $? -ne 0 ]; then
            echo "==> Failed to download artifacts"
            return 1
        fi
        checksums=$(checksum_format "${filtered}" "${raw_data}")
        echo "==> Running checksum check for all downloaded artifacts"
        if ! run_checksum512 "${checksums}" "${output_dir}"; then
            echo "==> Checksum failed for some artifacts"
            return 1
        fi
        
        cd "${output_dir}"
        echo "==> Extracting artifacts"
        for f in $(ls *.tar.gz | grep -vE "^dtbs"); do echo "==> Extracting ${f}"; tar --no-same-permissions --overwrite -ozxvf "${f}"; done
    }

    # Run will do the full verification, download, and extract process for a single HookOS and kernel version.
    function run_for_hookos_version() {
        local download_url="$1"
        local kernel_arch="$2"
        local kernel_version="$3"
        local hookos_version="$4"
        local output_dir="$5"
        local ext="$6"
        local checksum_file="${output_dir}/${hookos_version}/${kernel_version}/checksum.txt"
        
        # 1. make sure the output directory exists
        echo "==> Creating output directory: ${output_dir}/${hookos_version}/${kernel_version}"
        mkdir -p "${output_dir}/${hookos_version}/${kernel_version}"
        
        # 2. download the checksum file
        echo "==> Downloading checksum file from ${url} to ${checksum_file}"
        if ! wget -O "${checksum_file}" ${url}/checksum.txt; then
            echo "==> Failed to download checksum file: ${url}/checksum.txt"
            return 1
        fi
        
        # 3. parse the checksum file for only the artifacts requested
        echo "==> Parsing checksum file"
        raw_data=$(cat "${checksum_file}")
        data=$(cat "${checksum_file}" | awk '{print $2}')
        by_kernel=$(get_by_kernel_version "${data}" "${kernel_version}")
        by_extension=$(get_by_extension "${by_kernel}" "${ext}")
        filtered=$(get_by_arch "${by_extension}" "${kernel_arch}")
        
        echo "filtered artifacts: ${filtered}"
        run_for_kernel_version "${filtered}" "${raw_data}" "${output_dir}/${hookos_version}/${kernel_version}" "${checksum_file}" "${download_url}"
        if [ $? -ne 0 ]; then
            echo "==> Failed to download or verify artifacts for HookOS version ${hookos_version} and kernel version ${kernel_version}"
            return 1
        fi
    }
    
    # default values
    url="https://github.com/tinkerbell/hook/releases/download/latest"
    arch="both"
    version="6.6"
    ext="both"
    output_dir="."
    
    # valid options
    valid_arches=("x86_64" "aarch64" "both")
    valid_versions=("5.10" "6.6" "both")
    valid_exts=("tar.gz" "iso" "both")
    
    args=$(getopt -a -o u:a:v:e:o:h --long url:,arch:,version:,ext:,output-dir:,help -- "$@")
    if [[ $? -gt 0 ]]; then
        usage
    fi
    
    eval set -- ${args}
    while :
    do
        case $1 in
        -u | --url)
            if [[ ! -z $2 ]]; then
            url=$2
            fi
            shift 2 ;;
        -a | --arch)
            if [[ ! -z $2 ]]; then
            validate_option "arch" "${valid_arches[*]}" $2
            arch=$2
            fi
            shift 2 ;;
        -v | --version)
            if [[ ! -z $2 ]]; then
            validate_option "version" "${valid_versions[*]}" $2
            version=$2
            fi
            shift 2 ;;
        -e | --ext)
            if [[ ! -z $2 ]]; then
            validate_option "ext" "${valid_exts[*]}" $2
            ext=$2
            fi
            shift 2 ;;
        -o | --output-dir)
            if [[ ! -z $2 ]]; then
            output_dir="$2"
            output_dir="${output_dir%/}" # remove trailing slash if exists
            fi
            shift 2 ;;
        -h | --help)
            usage
            exit 1
            shift ;;
        # -- means the end of the arguments; drop this, and break out of the while loop
        --) shift; break ;;
        *) >&2 echo Unsupported option: $1
            usage ;;
        esac
    done
    
    echo "==> Downloading HookOS artifacts from ${url} for architecture(s): ${arch} and extension(s): ${ext} and kernel version(s): ${version}"
    
    function main() {
        local hookos_version="$(basename ${url})"
        
        if [ "${version}" == "5.10" ]; then
            run_for_hookos_version "${url}" "${arch}" "${version}" "${hookos_version}" "${output_dir}" "${ext}"
            if [ $? -ne 0 ]; then
                echo "==> Failed to download or verify artifacts for HookOS version ${hookos_version} and kernel version ${version}"
                return 1
            fi
            # create symlinks for the 5.10 artifacts
            echo "==> Creating symlinks for the 5.10 artifacts"
            cd "${output_dir}"
            rm -rf "${output_dir}/vmlinuz-x86_64" "${output_dir}/initramfs-x86_64" "${output_dir}/vmlinuz-aarch64" "${output_dir}/initramfs-aarch64"
            ln -nfs "./${hookos_version}/${version}/vmlinuz-x86_64" "${output_dir}/vmlinuz-x86_64"
            ln -nfs "./${hookos_version}/${version}/initramfs-x86_64" "${output_dir}/initramfs-x86_64"
            ln -nfs "./${hookos_version}/${version}/vmlinuz-aarch64" "${output_dir}/vmlinuz-aarch64"
            ln -nfs "./${hookos_version}/${version}/initramfs-aarch64" "${output_dir}/initramfs-aarch64"
            if [ "${ext}" == "iso" ] || [ "${ext}" == "both" ]; then
                echo "==> Creating symlinks for the 5.10 ISO artifacts"
                rm -rf "${output_dir}/hook-x86_64-efi-initrd.iso" "${output_dir}/hook-aarch64-efi-initrd.iso"
                ln -nfs "./${hookos_version}/${version}/hook-x86_64-efi-initrd.iso" "${output_dir}/hook-x86_64-efi-initrd.iso"
                ln -nfs "./${hookos_version}/${version}/hook-aarch64-efi-initrd.iso" "${output_dir}/hook-aarch64-efi-initrd.iso"
            fi
        elif [ "${version}" == "6.6" ]; then
            run_for_hookos_version "${url}" "${arch}" "${version}" "${hookos_version}" "${output_dir}" "${ext}"
            if [ $? -ne 0 ]; then
                echo "==> Failed to download or verify artifacts for HookOS version ${hookos_version} and kernel version ${version}"
                return 1
            fi
            # create symlinks for the 6.6 artifacts
            echo "==> Creating symlinks for the 6.6 artifacts"
            cd "${output_dir}"
            rm -rf "${output_dir}/vmlinuz-x86_64" "${output_dir}/initramfs-x86_64" "${output_dir}/vmlinuz-aarch64" "${output_dir}/initramfs-aarch64" 
            ln -nfs "./${hookos_version}/${version}/vmlinuz-latest-lts-x86_64" "${output_dir}/vmlinuz-x86_64"
            ln -nfs "./${hookos_version}/${version}/initramfs-latest-lts-x86_64" "${output_dir}/initramfs-x86_64"
            ln -nfs "./${hookos_version}/${version}/vmlinuz-latest-lts-aarch64" "${output_dir}/vmlinuz-aarch64"
            ln -nfs "./${hookos_version}/${version}/initramfs-latest-lts-aarch64" "${output_dir}/initramfs-aarch64"
            if [ "${ext}" == "iso" ] || [ "${ext}" == "both" ]; then
                echo "==> Creating symlinks for the 6.6 ISO artifacts"
                rm -rf "${output_dir}/hook-latest-lts-x86_64-efi-initrd.iso" "${output_dir}/hook-latest-lts-aarch64-efi-initrd.iso"
                ln -nfs "./${hookos_version}/${version}/hook-latest-lts-x86_64-efi-initrd.iso" "${output_dir}/hook-latest-lts-x86_64-efi-initrd.iso"
                ln -nfs "./${hookos_version}/${version}/hook-latest-lts-aarch64-efi-initrd.iso" "${output_dir}/hook-latest-lts-aarch64-efi-initrd.iso"
            fi
        elif [ "${version}" == "both" ]; then
            run_for_hookos_version "${url}" "${arch}" "5.10" "${hookos_version}" "${output_dir}" "${ext}"
            if [ $? -ne 0 ]; then
                echo "==> Failed to download or verify artifacts for HookOS version ${hookos_version} and kernel version 5.10"
                return 1
            fi
            run_for_hookos_version "${url}" "${arch}" "6.6" "${hookos_version}" "${output_dir}" "${ext}"
            if [ $? -ne 0 ]; then
                echo "==> Failed to download or verify artifacts for HookOS version ${hookos_version} and kernel version 6.6"
                return 1
            fi
            # create symlinks for the 6.6 artifacts
            cd "${output_dir}"
            echo "==> Creating symlinks for the 6.6 artifacts"
            rm -rf "${output_dir}/vmlinuz-x86_64" "${output_dir}/initramfs-x86_64" "${output_dir}/vmlinuz-aarch64" "${output_dir}/initramfs-aarch64"
            ln -nfs "./${hookos_version}/6.6/vmlinuz-latest-lts-x86_64" "${output_dir}/vmlinuz-x86_64"
            ln -nfs "./${hookos_version}/6.6/initramfs-latest-lts-x86_64" "${output_dir}/initramfs-x86_64"
            ln -nfs "./${hookos_version}/6.6/vmlinuz-latest-lts-aarch64" "${output_dir}/vmlinuz-aarch64"
            ln -nfs "./${hookos_version}/6.6/initramfs-latest-lts-aarch64" "${output_dir}/initramfs-aarch64"
            if [ "${ext}" == "iso" ] || [ "${ext}" == "both" ]; then
                echo "==> Creating symlinks for the 5.10 and 6.6 ISO artifacts"
                rm -rf "${output_dir}/hook-latest-lts-x86_64-efi-initrd.iso" "${output_dir}/hook-latest-lts-aarch64-efi-initrd.iso"
                rm -rf "${output_dir}/hook-x86_64-efi-initrd.iso" "${output_dir}/hook-aarch64-efi-initrd.iso"
                ln -nfs "./${hookos_version}/6.6/hook-latest-lts-x86_64-efi-initrd.iso" "${output_dir}/hook-latest-lts-x86_64-efi-initrd.iso"
                ln -nfs "./${hookos_version}/6.6/hook-latest-lts-aarch64-efi-initrd.iso" "${output_dir}/hook-latest-lts-aarch64-efi-initrd.iso"
                ln -nfs "./${hookos_version}/5.10/hook-x86_64-efi-initrd.iso" "${output_dir}/hook-x86_64-efi-initrd.iso"
                ln -nfs "./${hookos_version}/5.10/hook-aarch64-efi-initrd.iso" "${output_dir}/hook-aarch64-efi-initrd.iso"
            fi
        else
            echo "==> Unsupported version: ${version}"
            return 1
        fi
        return 0
    }
    
    if ! main; then
        exit 1
    fi
    
    echo "==> All artifacts available, waiting for signals..."
    sleep infinity & PID=$!
    trap "kill $PID" INT TERM
    wait $PID
    
{{- end }}
