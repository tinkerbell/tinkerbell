// Code generated by MockGen. DO NOT EDIT.
// Source: internal/frontend/ec2/frontend.go

// Package ec2 is a generated GoMock package.
package ec2

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	"github.com/tinkerbell/tinkerbell/pkg/data"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetEC2Instance mocks base method.
func (m *MockClient) GetEC2Instance(arg0 context.Context, ip string) (data.Ec2Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEC2Instance", arg0, ip)
	ret0, _ := ret[0].(data.Ec2Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEC2Instance indicates an expected call of GetEC2Instance.
func (mr *MockClientMockRecorder) GetEC2Instance(arg0, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEC2Instance", reflect.TypeOf((*MockClient)(nil).GetEC2Instance), arg0, ip)
}

// GetEC2InstanceByInstanceID mocks base method.
func (m *MockClient) GetEC2InstanceByInstanceID(arg0 context.Context, instanceID string) (data.Ec2Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEC2InstanceByInstanceID", arg0, instanceID)
	ret0, _ := ret[0].(data.Ec2Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEC2InstanceByInstanceID indicates an expected call of GetEC2InstanceByInstanceID.
func (mr *MockClientMockRecorder) GetEC2InstanceByInstanceID(arg0, instanceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEC2InstanceByInstanceID", reflect.TypeOf((*MockClient)(nil).GetEC2InstanceByInstanceID), arg0, instanceID)
}
